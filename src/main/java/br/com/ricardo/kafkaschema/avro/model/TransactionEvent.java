/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.ricardo.kafkaschema.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Transaction event */
@org.apache.avro.specific.AvroGenerated
public class TransactionEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2995929879422906530L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionEvent\",\"namespace\":\"br.com.ricardo.kafkaschema.avro.model\",\"doc\":\"Transaction event\",\"fields\":[{\"name\":\"header\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TransactionEventHeader\",\"doc\":\"Default information\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"GUID (UUID) of the event making it globally identifiable\"},{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source system which created the event\"},{\"name\":\"createdAt\",\"type\":\"long\",\"doc\":\"Event timestamp creation in epoch format\"}]}],\"default\":null},{\"name\":\"body\",\"type\":{\"type\":\"record\",\"name\":\"TransactionEventBody\",\"doc\":\"Body information of the event\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"UUID of the transaction\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"UUID of the user that initiated the transaction\"},{\"name\":\"transactionType\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"INSTANT_PAYMENT\",\"SEPA\",\"CREDIT_CARD\"]},\"doc\":\"Transaction type. Future values might be added\"},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"The timestamp when the transaction event was generated\"},{\"name\":\"amount\",\"type\":\"long\",\"doc\":\"The value of the transaction\"},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Transaction currency\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Description of the transaction purpose\",\"default\":null}]},\"doc\":\"body of transaction event\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionEvent> ENCODER =
      new BinaryMessageEncoder<TransactionEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionEvent> DECODER =
      new BinaryMessageDecoder<TransactionEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader header;
  /** body of transaction event */
  private br.com.ricardo.kafkaschema.avro.model.TransactionEventBody body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionEvent() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param body body of transaction event
   */
  public TransactionEvent(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader header, br.com.ricardo.kafkaschema.avro.model.TransactionEventBody body) {
    this.header = header;
    this.body = body;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return body;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader)value$; break;
    case 1: body = (br.com.ricardo.kafkaschema.avro.model.TransactionEventBody)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader getHeader() {
    return header;
  }


  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return body of transaction event
   */
  public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody getBody() {
    return body;
  }


  /**
   * Sets the value of the 'body' field.
   * body of transaction event
   * @param value the value to set.
   */
  public void setBody(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody value) {
    this.body = value;
  }

  /**
   * Creates a new TransactionEvent RecordBuilder.
   * @return A new TransactionEvent RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder newBuilder() {
    return new br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder();
  }

  /**
   * Creates a new TransactionEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionEvent RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder newBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder other) {
    if (other == null) {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder();
    } else {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder(other);
    }
  }

  /**
   * Creates a new TransactionEvent RecordBuilder by copying an existing TransactionEvent instance.
   * @param other The existing instance to copy.
   * @return A new TransactionEvent RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder newBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEvent other) {
    if (other == null) {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder();
    } else {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionEvent>
    implements org.apache.avro.data.RecordBuilder<TransactionEvent> {

    private br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader header;
    private br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.Builder headerBuilder;
    /** body of transaction event */
    private br.com.ricardo.kafkaschema.avro.model.TransactionEventBody body;
    private br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder bodyBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.body)) {
        this.body = data().deepCopy(fields()[1].schema(), other.body);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasBodyBuilder()) {
        this.bodyBuilder = br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.newBuilder(other.getBodyBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.ricardo.kafkaschema.avro.model.TransactionEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.body)) {
        this.body = data().deepCopy(fields()[1].schema(), other.body);
        fieldSetFlags()[1] = true;
      }
      this.bodyBuilder = null;
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader getHeader() {
      return header;
    }


    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder setHeader(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.newBuilder(header));
        } else {
          setHeaderBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder setHeaderBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * body of transaction event
      * @return The value.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody getBody() {
      return body;
    }


    /**
      * Sets the value of the 'body' field.
      * body of transaction event
      * @param value The value of 'body'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder setBody(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody value) {
      validate(fields()[1], value);
      this.bodyBuilder = null;
      this.body = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * body of transaction event
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'body' field and creates one if it doesn't exist yet.
     * body of transaction event
     * @return This builder.
     */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder getBodyBuilder() {
      if (bodyBuilder == null) {
        if (hasBody()) {
          setBodyBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.newBuilder(body));
        } else {
          setBodyBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.newBuilder());
        }
      }
      return bodyBuilder;
    }

    /**
     * Sets the Builder instance for the 'body' field
     * body of transaction event
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder setBodyBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder value) {
      clearBody();
      bodyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'body' field has an active Builder instance
     * body of transaction event
     * @return True if the 'body' field has an active Builder instance
     */
    public boolean hasBodyBuilder() {
      return bodyBuilder != null;
    }

    /**
      * Clears the value of the 'body' field.
      * body of transaction event
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEvent.Builder clearBody() {
      body = null;
      bodyBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionEvent build() {
      try {
        TransactionEvent record = new TransactionEvent();
        if (headerBuilder != null) {
          try {
            record.header = this.headerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("header"));
            throw e;
          }
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader) defaultValue(fields()[0]);
        }
        if (bodyBuilder != null) {
          try {
            record.body = this.bodyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("body"));
            throw e;
          }
        } else {
          record.body = fieldSetFlags()[1] ? this.body : (br.com.ricardo.kafkaschema.avro.model.TransactionEventBody) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionEvent>
    READER$ = (org.apache.avro.io.DatumReader<TransactionEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.header == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.header.customEncode(out);
    }

    this.body.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.header = null;
      } else {
        if (this.header == null) {
          this.header = new br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader();
        }
        this.header.customDecode(in);
      }

      if (this.body == null) {
        this.body = new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody();
      }
      this.body.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.header = null;
          } else {
            if (this.header == null) {
              this.header = new br.com.ricardo.kafkaschema.avro.model.TransactionEventHeader();
            }
            this.header.customDecode(in);
          }
          break;

        case 1:
          if (this.body == null) {
            this.body = new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody();
          }
          this.body.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










