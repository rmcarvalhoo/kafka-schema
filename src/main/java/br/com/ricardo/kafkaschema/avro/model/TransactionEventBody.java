/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.ricardo.kafkaschema.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Body information of the event */
@org.apache.avro.specific.AvroGenerated
public class TransactionEventBody extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8035414362491996593L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionEventBody\",\"namespace\":\"br.com.ricardo.kafkaschema.avro.model\",\"doc\":\"Body information of the event\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"UUID of the transaction\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"UUID of the user that initiated the transaction\"},{\"name\":\"transactionType\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"INSTANT_PAYMENT\",\"SEPA\",\"CREDIT_CARD\"]},\"doc\":\"Transaction type. Future values might be added\"},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"The timestamp when the transaction event was generated\"},{\"name\":\"amount\",\"type\":\"long\",\"doc\":\"The value of the transaction\"},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Transaction currency\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Description of the transaction purpose\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionEventBody> ENCODER =
      new BinaryMessageEncoder<TransactionEventBody>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionEventBody> DECODER =
      new BinaryMessageDecoder<TransactionEventBody>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionEventBody> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionEventBody> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionEventBody> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionEventBody>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionEventBody to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionEventBody from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionEventBody instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionEventBody fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** UUID of the transaction */
  private java.lang.String transactionId;
  /** UUID of the user that initiated the transaction */
  private java.lang.String userId;
  /** Transaction type. Future values might be added */
  private br.com.ricardo.kafkaschema.avro.model.TransactionType transactionType;
  /** The timestamp when the transaction event was generated */
  private long date;
  /** The value of the transaction */
  private long amount;
  /** Transaction currency */
  private java.lang.String currency;
  /** Description of the transaction purpose */
  private java.lang.String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionEventBody() {}

  /**
   * All-args constructor.
   * @param transactionId UUID of the transaction
   * @param userId UUID of the user that initiated the transaction
   * @param transactionType Transaction type. Future values might be added
   * @param date The timestamp when the transaction event was generated
   * @param amount The value of the transaction
   * @param currency Transaction currency
   * @param description Description of the transaction purpose
   */
  public TransactionEventBody(java.lang.String transactionId, java.lang.String userId, br.com.ricardo.kafkaschema.avro.model.TransactionType transactionType, java.lang.Long date, java.lang.Long amount, java.lang.String currency, java.lang.String description) {
    this.transactionId = transactionId;
    this.userId = userId;
    this.transactionType = transactionType;
    this.date = date;
    this.amount = amount;
    this.currency = currency;
    this.description = description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return userId;
    case 2: return transactionType;
    case 3: return date;
    case 4: return amount;
    case 5: return currency;
    case 6: return description;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = value$ != null ? value$.toString() : null; break;
    case 1: userId = value$ != null ? value$.toString() : null; break;
    case 2: transactionType = (br.com.ricardo.kafkaschema.avro.model.TransactionType)value$; break;
    case 3: date = (java.lang.Long)value$; break;
    case 4: amount = (java.lang.Long)value$; break;
    case 5: currency = value$ != null ? value$.toString() : null; break;
    case 6: description = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return UUID of the transaction
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * UUID of the transaction
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.String value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return UUID of the user that initiated the transaction
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * UUID of the user that initiated the transaction
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return Transaction type. Future values might be added
   */
  public br.com.ricardo.kafkaschema.avro.model.TransactionType getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * Transaction type. Future values might be added
   * @param value the value to set.
   */
  public void setTransactionType(br.com.ricardo.kafkaschema.avro.model.TransactionType value) {
    this.transactionType = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The timestamp when the transaction event was generated
   */
  public long getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * The timestamp when the transaction event was generated
   * @param value the value to set.
   */
  public void setDate(long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the transaction
   */
  public long getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * The value of the transaction
   * @param value the value to set.
   */
  public void setAmount(long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Transaction currency
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Transaction currency
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the transaction purpose
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Description of the transaction purpose
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Creates a new TransactionEventBody RecordBuilder.
   * @return A new TransactionEventBody RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder newBuilder() {
    return new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder();
  }

  /**
   * Creates a new TransactionEventBody RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionEventBody RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder newBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder other) {
    if (other == null) {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder();
    } else {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder(other);
    }
  }

  /**
   * Creates a new TransactionEventBody RecordBuilder by copying an existing TransactionEventBody instance.
   * @param other The existing instance to copy.
   * @return A new TransactionEventBody RecordBuilder
   */
  public static br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder newBuilder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody other) {
    if (other == null) {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder();
    } else {
      return new br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionEventBody instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionEventBody>
    implements org.apache.avro.data.RecordBuilder<TransactionEventBody> {

    /** UUID of the transaction */
    private java.lang.String transactionId;
    /** UUID of the user that initiated the transaction */
    private java.lang.String userId;
    /** Transaction type. Future values might be added */
    private br.com.ricardo.kafkaschema.avro.model.TransactionType transactionType;
    /** The timestamp when the transaction event was generated */
    private long date;
    /** The value of the transaction */
    private long amount;
    /** Transaction currency */
    private java.lang.String currency;
    /** Description of the transaction purpose */
    private java.lang.String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[2].schema(), other.transactionType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionEventBody instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.ricardo.kafkaschema.avro.model.TransactionEventBody other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[2].schema(), other.transactionType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * UUID of the transaction
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * UUID of the transaction
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setTransactionId(java.lang.String value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * UUID of the transaction
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * UUID of the transaction
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * UUID of the user that initiated the transaction
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * UUID of the user that initiated the transaction
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * UUID of the user that initiated the transaction
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * UUID of the user that initiated the transaction
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * Transaction type. Future values might be added
      * @return The value.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionType getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * Transaction type. Future values might be added
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setTransactionType(br.com.ricardo.kafkaschema.avro.model.TransactionType value) {
      validate(fields()[2], value);
      this.transactionType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * Transaction type. Future values might be added
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * Transaction type. Future values might be added
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * The timestamp when the transaction event was generated
      * @return The value.
      */
    public long getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * The timestamp when the transaction event was generated
      * @param value The value of 'date'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setDate(long value) {
      validate(fields()[3], value);
      this.date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * The timestamp when the transaction event was generated
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'date' field.
      * The timestamp when the transaction event was generated
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * The value of the transaction
      * @return The value.
      */
    public long getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * The value of the transaction
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setAmount(long value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * The value of the transaction
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * The value of the transaction
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Transaction currency
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Transaction currency
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setCurrency(java.lang.String value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Transaction currency
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * Transaction currency
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the transaction purpose
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Description of the transaction purpose
      * @param value The value of 'description'.
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder setDescription(java.lang.String value) {
      validate(fields()[6], value);
      this.description = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the transaction purpose
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the transaction purpose
      * @return This builder.
      */
    public br.com.ricardo.kafkaschema.avro.model.TransactionEventBody.Builder clearDescription() {
      description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionEventBody build() {
      try {
        TransactionEventBody record = new TransactionEventBody();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.transactionType = fieldSetFlags()[2] ? this.transactionType : (br.com.ricardo.kafkaschema.avro.model.TransactionType) defaultValue(fields()[2]);
        record.date = fieldSetFlags()[3] ? this.date : (java.lang.Long) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Long) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (java.lang.String) defaultValue(fields()[5]);
        record.description = fieldSetFlags()[6] ? this.description : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionEventBody>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionEventBody>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionEventBody>
    READER$ = (org.apache.avro.io.DatumReader<TransactionEventBody>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionId);

    out.writeString(this.userId);

    out.writeEnum(this.transactionType.ordinal());

    out.writeLong(this.date);

    out.writeLong(this.amount);

    if (this.currency == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.currency);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionId = in.readString();

      this.userId = in.readString();

      this.transactionType = br.com.ricardo.kafkaschema.avro.model.TransactionType.values()[in.readEnum()];

      this.date = in.readLong();

      this.amount = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.currency = null;
      } else {
        this.currency = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionId = in.readString();
          break;

        case 1:
          this.userId = in.readString();
          break;

        case 2:
          this.transactionType = br.com.ricardo.kafkaschema.avro.model.TransactionType.values()[in.readEnum()];
          break;

        case 3:
          this.date = in.readLong();
          break;

        case 4:
          this.amount = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currency = null;
          } else {
            this.currency = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










